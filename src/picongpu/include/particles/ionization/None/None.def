/**
 * Copyright 2015 Marco Garten
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "types.h"

namespace picongpu
{
namespace particles
{
namespace ionization
{

    /** \struct None_Impl
     *
     * \brief Empty ionization model [that is used for all species that are not ionized]
     *
     * \tparam T_DestSpecies electron species to be created
     * \tparam T_SrcSpecies particle species that is ionized
     *         default is boost::mpl placeholder because specialization
     *         cannot be known in list of particle species' flags
     *         \see speciesDefinition.param
     */
    template<typename T_DestSpecies, typename T_SrcSpecies = bmpl::_1>
    struct None_Impl;

    /** \struct None
     *
     * \brief Fallback for all species that cannot/should not be ionized
     *
     * \tparam T_DestSpecies electron species to be created
     *
     * wrapper class,
     * needed because the SrcSpecies cannot be known during the
     * first specialization of the ionization model in the particle definition
     * \see speciesDefinition.param
     */
    template<typename T_DestSpecies>
    struct None
    {
        typedef None_Impl<T_DestSpecies> type;
    };

} // namespace ionization
} // namespace particles
} // namespace picongpu
