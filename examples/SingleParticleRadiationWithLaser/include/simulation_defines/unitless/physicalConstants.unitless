/**
 * Copyright 2013-2015 Axel Huebl, Rene Widera, Marco Garten
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */


#pragma once

namespace picongpu
{
    /** Unit of Speed */
    const float_64 UNIT_SPEED = SI::SPEED_OF_LIGHT_SI;
    /** Unit of time */
    const float_64 UNIT_TIME = SI::DELTA_T_SI;
    /** Unit of length */
    const float_64 UNIT_LENGTH = UNIT_TIME*UNIT_SPEED;

#if(SIMDIM==DIM3)
    namespace SI
    {
        /** density normed to dimension of the simulation*/
        const float_64  GAS_DENSITY_NORMED= SI::GAS_DENSITY_SI;
    } //namespace SI

    namespace particles
    {
        /** Number of electrons per particle (= macro particle weighting)
         *  unit: none */
        const float_X TYPICAL_NUM_PARTICLES_PER_MACROPARTICLE = 1;

    }

#elif(SIMDIM==DIM2)
    namespace SI
    {
        /** density normed to dimension of the simulation
         *
         * http://www.tf.uni-kiel.de/matwis/amat/mw1_ge/kap_6/basics/m6_2_1.html
         */
        const float_64  GAS_DENSITY_NORMED= SI::GAS_DENSITY_SI*UNIT_LENGTH;
    } //namespace SI
    namespace particles
    {
        /** Number of electrons per particle (= macro particle weighting)
         *  unit: none */
        const float_X TYPICAL_NUM_PARTICLES_PER_MACROPARTICLE = 1;
    }
#endif


    /** Unit of mass */
    const float_64 UNIT_MASS = SI::ELECTRON_MASS_SI * double(particles::TYPICAL_NUM_PARTICLES_PER_MACROPARTICLE);
    /** Unit of charge */
    const float_64 UNIT_CHARGE = -1.0 * SI::ELECTRON_CHARGE_SI * double(particles::TYPICAL_NUM_PARTICLES_PER_MACROPARTICLE);
    /** Unit of energy */
    const float_64 UNIT_ENERGY = (UNIT_MASS * UNIT_LENGTH * UNIT_LENGTH / (UNIT_TIME * UNIT_TIME));
    /** Unit of EField: V/m */
    const float_64 UNIT_EFIELD = 1.0 / (UNIT_TIME * UNIT_TIME / UNIT_MASS / UNIT_LENGTH * UNIT_CHARGE);
    //** Unit of BField: Tesla [T] = Vs/m^2 */
    const float_64 UNIT_BFIELD = (UNIT_MASS / (UNIT_TIME * UNIT_CHARGE));




    const float_X SPEED_OF_LIGHT = float_X(SI::SPEED_OF_LIGHT_SI / UNIT_SPEED);

    //! Charge of electron
    const float_X ELECTRON_CHARGE = (float_X) (SI::ELECTRON_CHARGE_SI / UNIT_CHARGE);
    //! Mass of electron
    const float_X ELECTRON_MASS = (float_X) (SI::ELECTRON_MASS_SI / UNIT_MASS);

    //! magnetic constant must be double 3.92907e-39
    const float_X MUE0 = (float_X) (SI::MUE0_SI / UNIT_LENGTH / UNIT_MASS * UNIT_CHARGE * UNIT_CHARGE);

    //! electric constant must be double 2.54513e+38
    const float_X EPS0 = (float_X) (1. / MUE0 / SPEED_OF_LIGHT / SPEED_OF_LIGHT);

    // = 1/c^2
    const float_X MUE0_EPS0 = float_X(1. / SPEED_OF_LIGHT / SPEED_OF_LIGHT);

    /* Atomic unit of electric field in PIC Efield units */
    const float_X ATOMIC_UNIT_EFIELD = float_X(SI::ATOMIC_UNIT_EFIELD / UNIT_EFIELD);

    /* Atomic unit of time in PIC units */
    const float_X ATOMIC_UNIT_TIME = float_X(SI::ATOMIC_UNIT_TIME / UNIT_TIME);

} //namespace picongpu
